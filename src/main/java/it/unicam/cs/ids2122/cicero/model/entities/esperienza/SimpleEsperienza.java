package it.unicam.cs.ids2122.cicero.model.entities.esperienza;

import com.google.common.base.Objects;
import it.unicam.cs.ids2122.cicero.model.entities.esperienza.percorso.Percorso;
import it.unicam.cs.ids2122.cicero.model.entities.territorio.Area;
import it.unicam.cs.ids2122.cicero.model.entities.tag.Tag;
import it.unicam.cs.ids2122.cicero.ruoli.Cicerone;
import it.unicam.cs.ids2122.cicero.util.Money;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * Rappresenta una semplice implementazione di un'{@code Esperienza} nella piattaforma Cicero.
 */
public class SimpleEsperienza implements Esperienza {

    private final String nome;
    private final Cicerone ciceroneCreatore;
    private final String descrizione;
    private final LocalDateTime dataInizio;
    private final LocalDateTime dataFine;
    private final int maxPartecipanti;
    private final int minPartecipanti;
    private final Percorso percorso;
    private final Money costoIndividuale;
    private final int maxGiorniRiserva;
    private final Set<Tag> tags;

    private final int id;
    private int postiDisponibili;
    private EsperienzaStatus status;
    private final LocalDateTime dataPubblicazione;
    private final LocalDateTime dataTermine;

    private Set<Area> aree;

    /**
     * Genera una {@code SimpleEsperienza}.
     * @param id id dell'{@code Esperienza}.
     * @param nome nome dell'{@code Esperienza}.
     * @param ciceroneCreatore cicerone creatore dell'{@code Esperienza}.
     * @param descrizione descrizione dell'{@code Esperienza}.
     * @param dataInizio data d'inizio dell'{@code Esperienza}.
     * @param dataFine data di conclusione dell'{@code Esperienza}.
     * @param maxPartecipanti numero minimo dei partecipanti all'{@code Esperienza}.
     * @param minPartecipanti numero massimo dei partecipanti all'{@code Esperienza}.
     * @param percorso {@link Percorso} dell'{@code Esperienza}.
     * @param costoIndividuale {@link Money} di un posto all'{@code Esperienza}.
     * @param maxGiorniRiserva numero massimo dei giorni di riserva per l'{@code Esperienza}.
     * @param tags insieme dei tags associati all'{@code Esperienza}.
     * @param postiDisponibili numero dei posti diponibili all'{@code Esperienza}.
     * @param status {@link EsperienzaStatus} dell'{@code Esperienza}.
     * @param dataPubblicazione data di pubblicazione dell'{@code Esperienza}.
     * @param dataTermine data di termine dell'{@code Esperienza}.
     */
    public SimpleEsperienza(int id, String nome, Cicerone ciceroneCreatore, String descrizione,
                            LocalDateTime dataInizio, LocalDateTime dataFine,
                            int maxPartecipanti, int minPartecipanti, Percorso percorso, Money costoIndividuale,
                            int maxGiorniRiserva, Set<Tag> tags, int postiDisponibili, EsperienzaStatus status,
                            LocalDateTime dataPubblicazione, LocalDateTime dataTermine) {
        // set by user
        this.nome = nome;
        this.ciceroneCreatore = ciceroneCreatore;
        this.descrizione = descrizione;
        this.dataInizio = dataInizio;
        this.dataFine = dataFine;
        this.minPartecipanti = minPartecipanti;
        this.maxPartecipanti = maxPartecipanti;
        this.percorso = percorso;
        this.costoIndividuale = costoIndividuale;
        this.maxGiorniRiserva = maxGiorniRiserva;
        this.tags=tags;

        // generated by db
        this.id = id;
        this.postiDisponibili = postiDisponibili;
        this.status = status;
        this.dataPubblicazione = dataPubblicazione;
        this.dataTermine = dataTermine;

        this.aree = new HashSet<>();
    }

    @Override
    public int getId() {
        return id;
    }

    @Override
    public String getName() {
        return this.nome;
    }

    @Override
    public Cicerone getCiceroneCreatore() {
        return ciceroneCreatore;
    }

    @Override
    public String getDescrizione() {
        return descrizione;
    }

    @Override
    public LocalDateTime getDataPubblicazione() {
        return dataPubblicazione;
    }

    @Override
    public LocalDateTime getDataInizio() {
        return dataInizio;
    }

    @Override
    public LocalDateTime getDataFine() {
        return dataFine;
    }

    @Override
    public LocalDateTime getDataTermine() {
        return dataTermine;
    }

    @Override
    public int getMaxPartecipanti() {
        return maxPartecipanti;
    }

    @Override
    public int getMinPartecipanti() {
        return minPartecipanti;
    }

    @Override
    public Percorso getPercorso() {
        return percorso;
    }

    @Override
    public Money getCostoIndividuale() {
        return costoIndividuale;
    }

    @Override
    public int getMaxRiserva() {
        return maxGiorniRiserva;
    }

    @Override
    public Set<Tag> getTags() {
        return tags;
    }

    @Override
    public Set<Area> getAree() {
        if (aree.isEmpty())
            aree = percorso.getAree();
        return aree;
    }

    @Override
    public EsperienzaStatus getStatus() {
        return status;
    }

    @Override
    public boolean isAvailable() {
        return postiDisponibili>0 && (status.equals(EsperienzaStatus.IDLE) || status.equals(EsperienzaStatus.VALIDA));
    }

    @Override
    public int getPostiDisponibili() {
        return postiDisponibili;
    }

    @Override
    public void cambiaStatus(EsperienzaStatus newStatus) {
        this.status = newStatus;
    }

    @Override
    public void cambiaPostiDisponibili(char simbolo, int numeroPosti) {
        switch (simbolo) {
            case '-':
                this.postiDisponibili = postiDisponibili - numeroPosti;break;
            case '+':
                this.postiDisponibili = postiDisponibili + numeroPosti;break;

        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        SimpleEsperienza that = (SimpleEsperienza) o;
        return getMaxPartecipanti() == that.getMaxPartecipanti() &&
                getMinPartecipanti() == that.getMinPartecipanti() &&
                getMaxRiserva() == that.getMaxRiserva() &&
                Objects.equal(getName(), that.getName()) &&
                Objects.equal(getCiceroneCreatore(), that.getCiceroneCreatore()) &&
                Objects.equal(getDataInizio(), that.getDataInizio()) &&
                Objects.equal(getDataFine(), that.getDataFine()) &&
                Objects.equal(getCostoIndividuale(), that.getCostoIndividuale());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(getName(),
                getCiceroneCreatore(),
                getDataInizio(), getDataFine(),
                getMaxPartecipanti(), getMinPartecipanti(),
                getCostoIndividuale(),
                getMaxRiserva());
    }

    @Override
    public String toString() {
        return "\n---INFORMAZIONI DELL'ESPERIENZA---" +
                "\nNome: '" + getName() + '\'' +
                "\nDescrizione: " + getDescrizione() +
                "\nUsername cicerone: '" + getCiceroneCreatore().getUsername() + '\'' +
                "\nStato: " + getStatus() +
                "\nData d'inizio: " + getDataInizio() +
                "\nData di conclusione: " + getDataFine() +
                "\nNumero max partecipanti: " + getMaxPartecipanti() +
                "\nNumero min partecipanti: " + getMinPartecipanti() +
                "\nCosto per posto: " + getCostoIndividuale().getValore() + " "
                + getCostoIndividuale().getValuta().getSymbol() +
                "\nMassimo giorni di riserva: " + getMaxRiserva() +
                "\nPosti disponibili: " + getPostiDisponibili() +
                "\nToponimi: " + getAree().stream().map(Area::getToponimo).collect(Collectors.toSet()) +
                "\nTags: " + getTags().stream().map(Tag::getName).collect(Collectors.toSet());
    }

    @Override
    public String shortToString(){
        return "\n---INFORMAZIONI DELL'ESPERIENZA---" +
                "\nNome: '" + getName() + '\'' +
                "\nData d'inizio: " + getDataInizio() +
                "\nData di conclusione: " + getDataFine() +
                "\nPosti disponibili: " + getPostiDisponibili() +
                "\nStato: " + getStatus() +
                "\nCosto per posto: " + getCostoIndividuale().getValore() + " "
                + getCostoIndividuale().getValuta().getSymbol() +
                "\nToponimi: " + getAree().stream().map(Area::getToponimo).collect(Collectors.toSet()) +
                "\nTags: " + getTags().stream().map(Tag::getName).collect(Collectors.toSet());
    }

    @Override
    public String longToString() {
        return this + percorso.toString();
    }
}
